#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include<unistd.h>
#define STRING_LENGTH 30
struct node{
    char word[STRING_LENGTH];
    int length;
    struct node *prev;
    struct node *next;
};
void read_file(struct node **head) { // read from file and fill in the linked list
    FILE *fptr = fopen("test.txt", "r");
    char content[30];

    if (fptr == NULL) {
        printf("unable to open the file\n");
    } else {
        while (fgets(content, 30, fptr) != NULL) {
            struct node *current = malloc(sizeof(struct node));
            current->prev = NULL;
            current->next = NULL;
            strcpy(current->word, content);
            current->length= (int) strlen(current->word);
            if (*head == 0) {
                *head=current;
            } else {
                struct node *temp=*head;
                while (temp->next!=NULL){ // add to double linked list
                    temp=temp->next;

                }
                temp->next = current;
                current->prev = temp;
            }

        }


        printf("load and read string Successfully\n");

    }
    fclose(fptr);
}

void printList(struct node *head){ // print the linked list before sorting
    while(head!=NULL){
        printf("%s\n",head->word);
        head=head->next;
    }
  //  printf("\n");
}

int maxLength(struct node *head) { // this function for return the maximum length of the word
    int num = 0;
    if (head == NULL) {
        return 0;  // Return 0 if the linked list is empty
    }
    while (head != NULL) {
        if (head->length >= num) {
            num = head->length;
        }

            head = head->next;

    }

    return (num -1);
}

void sorting(struct node **head, int max) { // sorting according to the ascii code
    for (int i = max - 1; i >= 0; i--) {
        struct node *sort[256] = {NULL}, *end[256] = {NULL};
        struct node *pos = *head;
        while (pos != NULL) {
            struct node *next = pos->next; // Store next node
            int index = (unsigned char)pos->word[i]; //give the ascii code for ith position
            pos->next = NULL; // first empty
            pos->prev = NULL;
            if (sort[index] == NULL) {
                sort[index]=end[index] =pos;
            } else {
                end[index]->next = pos;
                pos->prev = end[index];
                end[index] = pos;
            }

            pos = next; //  to the next node
        }

        *head = NULL;
        struct node **tail = head;

        for (int j = 0; j < 256; j++) {
            if (sort[j] != NULL) {
                *tail = sort[j];
                while ((*tail)!= NULL) {
                    tail = &(*tail)->next;
                }
            }
        }
    }

    printf("The list has been sorted \n");
}


void addWord(struct node **head){ // add a word to the double linked list
    printf("Enter a new  word to the list\n ");
    char data[STRING_LENGTH];
    scanf("%s",&data);
    struct node *temp= malloc(sizeof(struct node));
    strcpy(temp->word,data);
    temp->length=(int) strlen(temp->word);
    temp->prev=NULL; // insertion at the beginning
    temp->next=*head;
    (*head)->prev=temp;
    *head=temp;

    printf("A node with word %s has been added\n",data);
}


void deleteWord(struct node **head){
  struct node *ptr;
  ptr=*head;
  printf("Enter word from list that you need to delete it from list\n");
      char data[STRING_LENGTH];
     scanf("%s",&data);
      while(ptr->next!=NULL && strcmp(ptr->word, data) >0){
     ptr=ptr->next;
}
       if (ptr!=NULL){ // the node to be delete is found
    if(ptr->prev !=NULL){ // if the word is not at beginning
       ptr->prev->next = ptr->next;
}
    else{
    *head=ptr->next;
}
    if(ptr->next!=NULL){  // if the word is at the beginning
    ptr->next->prev = ptr->prev;

}
   free(ptr);
    printf("A node with word %s has been deleted\n",data);
   }
           //printf("Word %s not found in the list ,please retry\n", data);
}



void write_file(struct node *head){
    FILE *ptrfile= fopen("output_file.txt","w");
    while(head!=NULL){
        fprintf(ptrfile,"%s",head->word); // write into file
        head=head->next;
    }
    fclose(ptrfile);
    printf("add into the output file is done\n");
}


int main() {
    struct node *head= NULL;

    printf("\t\t\t\t---------- Noura Khdour  1212072  sec:1 ----------\n");
    printf("\t\t\t\t ---- project#1: Linked List with Radix Sort--------\n");
    printf("\t\t\t\t -----------------------------------------------------\n");
    do{
        printf("\n");
        printf(" 1 : Load the strings from read file\n");
        printf(" 2 : Print the string before Sorting \n");
        printf(" 3 : Sort the strings \n");
        printf(" 4 : Print the sorted strings\n");
        printf(" 5 : Add a new word to the list of sorting string and sort it\n");
        printf(" 6 : Delete a word from the sorted string\n");
        printf(" 7 : Save to output file\n");
        printf(" 8 : Exit\n");
        printf(" please select the number of instruction:\n");
        int choice ;
        scanf("%d",&choice);
        if(choice==1){
            read_file(&head);
        }

        if(choice==2){
            printf("The string before sorting:\n");
            printList(head);

        }

        else if(choice==3){
            int max= maxLength(head);
          //  printf("%d\n",max);
            sorting(&head, max);

        }

        else if(choice==4){
            printf("The string after sorting:\n");
            sorting(&head, maxLength(head));
            printList(head);

        }
        else if(choice==5){
            addWord(&head);
            printf("resorting\n");
            sorting(&head,maxLength(head));
            printList(head);
        }
        else if(choice==6){
            deleteWord(&head);
           // sorting(&head,maxLength(head));
            printList(head);
        }
        else if(choice==7){
            write_file(head);
        }
        else if (choice==8){
            printf("Exit the program :)\n");
            exit(1);
        }

    } while (1);

    return 0;
}
